services:
- name: docker:dind

stages:
  - build
  - sonarqube-check
  - push
  - deploy

cache:
  paths:
    - node_modules

construccion:
  image: node:14.16.1-alpine
  stage: build
  script:
    - CI=false
    - npm install
    - npm run build
  artifacts:
    paths:
      - build/*
    expire_in: 1 week
  only:
    - develop

sonarqube-check:
  image: 
    name: sonarsource/sonar-scanner-cli:latest
    entrypoint: [""]
  stage: sonarqube-check
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  # Defines the location of the analysis task cache
    GIT_DEPTH: "0"  # Tells git to fetch all the branches of the project, required by the analysis task
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  script: 
    - sonar-scanner
  allow_failure: true
  only:
    - develop

imagen_container:
  image: docker:stable
  stage: push
  script: 
    - echo -n "$HARBOR_PASSWORD" | docker login "$HARBOR_REGISTRY" --username $HARBOR_USERNAME --password-stdin
    - docker pull $HARBOR_REGISTRY/library/$HARBOR_REGISTRY_IMAGE:lastest || true
    - >
      docker build
      --pull
      --cache-from $HARBOR_REGISTRY_IMAGE:latest
      --tag $HARBOR_REGISTRY/library/$HARBOR_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA
      --tag $HARBOR_REGISTRY/library/$HARBOR_REGISTRY_IMAGE:lastest .
    - docker push $HARBOR_REGISTRY/library/$HARBOR_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA
    - docker push $HARBOR_REGISTRY/library/$HARBOR_REGISTRY_IMAGE:lastest
    - docker logout $HARBOR_REGISTRY
  only:
    - develop

despliegue_develop:
  stage: deploy
  image: dtzar/helm-kubectl
  script:
    - kubectl config set-cluster k8s --server="${K8S_SERVER}"
    - kubectl config set clusters.k8s.certificate-authority-data ${K8S_CERTIFICATE_AUTHORITY_DATA}
    - kubectl config set-credentials "$K8S_USER" --token="${K8S_USER_TOKEN}"
    - kubectl config set-context default --cluster=k8s --user="$K8S_USER"
    - kubectl config use-context default
    - cat ${KUBECONFIG}
    - sed -i "s/<VERSION>/${CI_COMMIT_SHORT_SHA}/g" deployment.yaml
    - sed -i "s/<HARBOR_REGISTRY>/${HARBOR_REGISTRY}/g" deployment.yaml
    - cat deployment.yaml
    - kubectl --insecure-skip-tls-verify apply -f deployment.yaml
  only:
    - develop

after_script:
  - echo "Finalizando Integracion Continua"
